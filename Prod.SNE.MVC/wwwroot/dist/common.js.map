{"version":3,"sources":["./node_modules/ngx-youtube-player/fesm2015/ngx-youtube-player.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACiH;AAChH;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA,qEAAqE,gBAAgB;AACrF;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,qBAAqB;AACrB;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAqB,EAAE,mDAAmD,iCAAiC,sDAAW,CAAC,oDAAS,GAAG,EAAE,mDAAmD;AACrN;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,KAAK,OAAO,oDAAM;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK,6BAA6B;AAClC,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,cAAc,OAAO,mDAAK,EAAE;AAC5B,aAAa,OAAO,mDAAK,EAAE;AAC3B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,aAAa,OAAO,oDAAM,EAAE;AAC5B,cAAc,OAAO,oDAAM,EAAE;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEiI;AACjI","file":"common.js","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Component, ChangeDetectionStrategy, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nfunction win() {\n    return window;\n}\nfunction YouTubeRef() {\n    return win()[\"YT\"];\n}\nfunction YouTubePlayerRef() {\n    return YouTubeRef().Player;\n}\nconst defaultSizes = {\n    height: 270,\n    width: 367,\n};\nclass YoutubePlayerService {\n    constructor(zone) {\n        this.zone = zone;\n        this.api = new ReplaySubject(1);\n        this.createApi();\n    }\n    loadPlayerApi(options) {\n        const doc = win().document;\n        if (!YoutubePlayerService[\"ytApiLoaded\"]) {\n            YoutubePlayerService.ytApiLoaded = true;\n            const playerApiScript = doc.createElement(\"script\");\n            playerApiScript.type = \"text/javascript\";\n            playerApiScript.src = `${options.protocol}://www.youtube.com/iframe_api`;\n            doc.body.appendChild(playerApiScript);\n        }\n    }\n    setupPlayer(elementId, outputs, sizes, videoId = \"\", playerVars) {\n        const createPlayer = () => {\n            if (YouTubePlayerRef) {\n                this.createPlayer(elementId, outputs, sizes, videoId, playerVars);\n            }\n        };\n        this.api.subscribe(createPlayer);\n    }\n    play(player) {\n        player.playVideo();\n    }\n    pause(player) {\n        player.pauseVideo();\n    }\n    playVideo(media, player) {\n        const id = media.id.videoId ? media.id.videoId : media.id;\n        player.loadVideoById(id);\n        this.play(player);\n    }\n    isPlaying(player) {\n        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n        const isPlayerReady = player && player.getPlayerState;\n        const playerState = isPlayerReady ? player.getPlayerState() : {};\n        const isPlayerPlaying = isPlayerReady\n            ? playerState !== YouTubeRef().PlayerState.ENDED &&\n                playerState !== YouTubeRef().PlayerState.PAUSED\n            : false;\n        return isPlayerPlaying;\n    }\n    createPlayer(elementId, outputs, sizes, videoId = \"\", playerVars = {}) {\n        const playerSize = {\n            height: sizes.height || defaultSizes.height,\n            width: sizes.width || defaultSizes.width,\n        };\n        const ytPlayer = YouTubePlayerRef();\n        return new ytPlayer(elementId, Object.assign(Object.assign({}, playerSize), { events: {\n                onReady: (ev) => {\n                    this.zone.run(() => outputs.ready && outputs.ready.next(ev.target));\n                },\n                onStateChange: (ev) => {\n                    this.zone.run(() => outputs.change && outputs.change.next(ev));\n                },\n            }, playerVars,\n            videoId }));\n    }\n    toggleFullScreen(player, isFullScreen) {\n        let { height, width } = defaultSizes;\n        if (!isFullScreen) {\n            height = window.innerHeight;\n            width = window.innerWidth;\n        }\n        player.setSize(width, height);\n    }\n    // adpoted from uid\n    generateUniqueId() {\n        const len = 7;\n        return Math.random().toString(35).substr(2, len);\n    }\n    createApi() {\n        const onYouTubeIframeAPIReady = () => {\n            if (win()) {\n                win()[\"onYouTubeIframeAPIReadyCalled\"] = true;\n                this.api.next();\n            }\n        };\n        win()[\"onYouTubeIframeAPIReady\"] = onYouTubeIframeAPIReady;\n        /**\n         * If onYouTubeIframeAPIReady is called in other place, then just trigger next\n         * This is to prevent player not initializing issue when another player got initialized in other place\n         */\n        if (win()[\"onYouTubeIframeAPIReadyCalled\"]) {\n            this.api.next();\n        }\n    }\n}\nYoutubePlayerService.ytApiLoaded = false;\nYoutubePlayerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function YoutubePlayerService_Factory() { return new YoutubePlayerService(i0.ɵɵinject(i0.NgZone)); }, token: YoutubePlayerService, providedIn: \"root\" });\nYoutubePlayerService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: \"root\",\n            },] }\n];\nYoutubePlayerService.ctorParameters = () => [\n    { type: NgZone }\n];\n\nclass YoutubePlayerComponent {\n    constructor(playerService, elementRef, renderer) {\n        this.playerService = playerService;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.videoId = '';\n        this.height = defaultSizes.height;\n        this.width = defaultSizes.width;\n        /**\n         * @description sets the protocol by the navigator object\n         * if there is no window, it sets a default http protocol\n         * unless the protocol is set from outside\n         */\n        this.protocol = this.getProtocol();\n        this.playerVars = {};\n        // player created and initialized - sends instance of the player\n        this.ready = new EventEmitter();\n        // state change: send the YT event with its state\n        this.change = new EventEmitter();\n    }\n    ngAfterContentInit() {\n        const htmlId = this.playerService.generateUniqueId();\n        const playerSize = { height: this.height, width: this.width };\n        const container = this.renderer.selectRootElement('#yt-player-ngx-component');\n        this.renderer.setAttribute(container, 'id', htmlId);\n        this.playerService.loadPlayerApi({\n            protocol: this.protocol\n        });\n        this.playerService.setupPlayer(htmlId, {\n            change: this.change,\n            ready: this.ready\n        }, playerSize, this.videoId, this.playerVars);\n    }\n    getProtocol() {\n        const hasWindow = window && window.location;\n        const protocol = hasWindow\n            ? window.location.protocol.replace(':', '')\n            : 'http';\n        return protocol;\n    }\n}\nYoutubePlayerComponent.decorators = [\n    { type: Component, args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'youtube-player',\n                template: `\n    <div id=\"yt-player-ngx-component\"></div>\n  `\n            },] }\n];\nYoutubePlayerComponent.ctorParameters = () => [\n    { type: YoutubePlayerService },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nYoutubePlayerComponent.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    protocol: [{ type: Input }],\n    playerVars: [{ type: Input }],\n    ready: [{ type: Output }],\n    change: [{ type: Output }]\n};\n\nclass NgxYoutubePlayerModule {\n    static forRoot() {\n        return {\n            ngModule: NgxYoutubePlayerModule,\n            providers: [YoutubePlayerService]\n        };\n    }\n}\nNgxYoutubePlayerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [YoutubePlayerComponent],\n                imports: [],\n                providers: [YoutubePlayerService],\n                exports: [YoutubePlayerComponent]\n            },] }\n];\n\n/*\n * Public API Surface of ngx-youtube-player\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxYoutubePlayerModule, YouTubePlayerRef, YouTubeRef, YoutubePlayerComponent, YoutubePlayerService, defaultSizes, win };\n//# sourceMappingURL=ngx-youtube-player.js.map\n"],"sourceRoot":"webpack:///"}